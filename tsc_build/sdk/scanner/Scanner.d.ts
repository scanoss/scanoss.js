import EventEmitter from 'eventemitter3';
import { ScannerCfg } from './ScannerCfg';
import { ScannerInput } from './ScannerTypes';
export declare class Scanner extends EventEmitter {
    private scannerCfg;
    private workDirectory;
    private resultFilePath;
    private wfpFilePath;
    private obfuscateMapFilePath;
    private obfuscateMap;
    private scanRoot;
    private scannerId;
    private wfpProvider;
    private dispatcher;
    private finishPromise;
    private scannerInput;
    private scanFinished;
    private processingNewData;
    private processedFiles;
    private running;
    private filesToScan;
    private responseBuffer;
    private filesNotScanned;
    constructor(scannerCfg?: ScannerCfg);
    init(): void;
    setWorkDirectory(workDirectory: string): void;
    getWorkDirectory(): string;
    cleanWorkDirectory(): void;
    scan(scannerInput: Array<ScannerInput>): Promise<string>;
    getScannerId(): string;
    stop(): void;
    isRunning(): boolean;
    private setWinnowerListeners;
    private setDispatcherListeners;
    private appendFilesToNotScanned;
    private insertIntoBuffer;
    private isBufferEmpty;
    private bufferReachedLimit;
    private deobfuscationResponses;
    private bufferToFiles;
    private finishJob;
    private finishScan;
    private reportLog;
    private errorHandler;
    private createOutputFiles;
    private appendOutputFiles;
    private isValidInput;
    private abort;
}
