import fs from 'fs';
import * as fpath from 'path';
import { isBinaryFileSync } from 'isbinaryfile';
export var FilterType;
(function (FilterType) {
    FilterType["NAME"] = "NAME";
    FilterType["CONTENT"] = "CONTENT";
    FilterType["EXTENSION"] = "EXTENSION";
    FilterType["SIZE"] = "SIZE";
    FilterType["DATE"] = "DATE";
    FilterType["NULL"] = "NONE";
})(FilterType || (FilterType = {}));
;
export var FilterListType;
(function (FilterListType) {
    FilterListType["BANNED"] = "BANNED";
    FilterListType["ALLOW"] = "ALLOW";
})(FilterListType || (FilterListType = {}));
;
export var FilterScope;
(function (FilterScope) {
    FilterScope["FOLDER"] = "FOLDER";
    FilterScope["FILE"] = "FILE";
    FilterScope["ALL"] = "ALL";
})(FilterScope || (FilterScope = {}));
class AbstractFilter {
    constructor(condition, value) {
        this.condition = condition;
        this.value = value;
        this.ftype = FilterType.NULL;
        this.scope = FilterScope.ALL;
    }
    evaluate(path) {
        return true;
    }
}
export class NameFilter extends AbstractFilter {
    constructor(condition, value, scope) {
        super(condition, value);
        this.ftype = FilterType.NAME;
        this.scope = scope || super.scope;
    }
    evaluate(path) {
        this.value = this.value.toLowerCase();
        path = path.toLowerCase();
        if (this.condition === NameFilter.CONTAINS) {
            return !(path.indexOf(this.value) >= 0);
        }
        if (this.condition === NameFilter.FULLMATCH)
            return fpath.basename(path) !== this.value;
        if (this.condition === NameFilter.STARTS) {
            let filename;
            filename = fpath.basename(path);
            return !filename.startsWith(this.value);
        }
        if (this.condition === NameFilter.ENDS) {
            let filename;
            filename = fpath.basename(path);
            return !filename.endsWith(this.value);
        }
        return true;
    }
}
NameFilter.CONTAINS = 'contains';
NameFilter.FULLMATCH = 'fullmatch';
NameFilter.STARTS = 'starts';
NameFilter.ENDS = 'ends';
export class ContentFilter extends AbstractFilter {
    constructor(condition, value, scope) {
        super(condition, value);
        this.ftype = FilterType.CONTENT;
        this.scope = scope || super.scope; // Verificar
    }
    evaluate(path) {
        const binary = isBinaryFileSync(path);
        if (this.condition === ContentFilter.EQUAL && this.value === ContentFilter.VALUE_BINARY && binary)
            return false;
        if (this.condition === ContentFilter.NOT_EQUAL && this.value === ContentFilter.VALUE_TEXT && binary)
            return false;
        if (this.condition === ContentFilter.EQUAL && this.value === ContentFilter.VALUE_TEXT && !binary)
            return false;
        if (this.condition === ContentFilter.NOT_EQUAL && this.value === ContentFilter.VALUE_BINARY && !binary)
            return false;
        return true;
    }
}
ContentFilter.VALUE_BINARY = 'BINARY';
ContentFilter.VALUE_TEXT = 'TEXT';
ContentFilter.EQUAL = '=';
ContentFilter.NOT_EQUAL = '!=';
export class ExtensionFilter extends AbstractFilter {
    constructor(condition, value, scope) {
        super(condition, value);
        this.ftype = FilterType.EXTENSION;
        this.scope = scope || super.scope; // Verificar
    }
    evaluate(path) {
        path = path.toLowerCase();
        this.value = this.value.toLowerCase();
        return !path.endsWith(this.value);
    }
}
export class SizeFilter extends AbstractFilter {
    constructor(condition, value, scope) {
        super(condition, value);
        this.ftype = FilterType.SIZE;
        this.scope = scope || super.scope; // Verificar
    }
    evaluate(path) {
        const stat = fs.statSync(path);
        if (this.condition === SizeFilter.BIGGER) {
            if (stat.size > parseInt(this.value, 10)) {
                //   console.log("NO aceptado por que NO es mayor");
                return false;
            }
            return true;
        }
        if (this.condition === SizeFilter.SMALLER) {
            if (stat.size < parseInt(this.value, 10)) {
                return false;
            }
            return true;
        }
        if (this.condition === SizeFilter.EQUAL) {
            if (stat.size === parseInt(this.value, 10)) {
                return false;
            }
            return true;
        }
        return true;
    }
}
SizeFilter.BIGGER = '>';
SizeFilter.SMALLER = '<';
SizeFilter.EQUAL = '=';
export class DateFilter extends AbstractFilter {
    constructor(condition, value, scope) {
        super(condition, value);
        this.ftype = FilterType.NAME;
        this.scope = scope || super.scope; // Verificar
    }
    evaluate(path) {
        const stats = fs.statSync(path);
        modified = stats.mtime;
        const lDate = new Date(this.value);
        const ms = stats.mtimeMs;
        var modified = new Date(ms);
        // console.log(lDate);
        // console.log(modified);
        if (this.condition === DateFilter.BIGGER) {
            if (modified > lDate) {
                return false;
            }
            return true;
        }
        if (this.condition === DateFilter.SMALLER) {
            if (modified < lDate) {
                return false;
            }
            return true;
        }
        return true;
    }
}
DateFilter.BIGGER = '>';
DateFilter.SMALLER = '<';
export class FilterList {
    constructor(fList) {
        this.filters = [];
        if (fList)
            this.load(fList);
    }
    addFilter(filter) {
        this.filters.push(filter);
    }
    // Returns false if the path match with some filter in the list
    // IMPORTANT: This method DOES NOT honor the FilterType (BANNED | ALLOW)
    // Use the method include to honor the FilterType
    evaluate(path) {
        const pathStat = fs.lstatSync(path);
        let i;
        for (i = 0; i < this.filters.length; i += 1) {
            const evaluation = this.filters[i].evaluate(path);
            if (this.filters[i].scope === FilterScope.FOLDER && pathStat.isDirectory() && !evaluation)
                return false;
            if (this.filters[i].scope === FilterScope.FILE && pathStat.isFile() && !evaluation)
                return false;
            if (this.filters[i].scope === FilterScope.ALL && !evaluation)
                return false;
        }
        return true;
    }
    //
    include(path) {
        if (this.type === FilterListType.BANNED)
            return this.evaluate(path);
        return !this.evaluate(path);
    }
    save(path) {
        fs.writeFileSync(path, JSON.stringify(this.filters).toString());
    }
    loadFromFile(path) {
        const json = fs.readFileSync(path, 'utf8');
        const filters = JSON.parse(json);
        this.load(filters);
    }
    unload() {
        this.filters = [];
    }
    load(fList) {
        this.type = fList.type;
        const a = fList.filters;
        let i;
        for (i = 0; i < a.length; i += 1) {
            const scope = a[i].scope || FilterScope.ALL;
            if (a[i].ftype === FilterType.NAME)
                this.addFilter(new NameFilter(a[i].condition, a[i].value, scope));
            if (a[i].ftype === FilterType.DATE)
                this.addFilter(new DateFilter(a[i].condition, a[i].value, scope));
            if (a[i].ftype === FilterType.SIZE)
                this.addFilter(new SizeFilter(a[i].condition, a[i].value, scope));
            if (a[i].ftype === FilterType.EXTENSION)
                this.addFilter(new ExtensionFilter(a[i].condition, a[i].value, scope));
            if (a[i].ftype === FilterType.CONTENT)
                this.addFilter(new ContentFilter(a[i].condition, a[i].value, scope));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,