// source: scanoss/api/cryptography/v2/scanoss-cryptography.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var scanoss_api_common_v2_scanoss$common_pb = require('../../../../scanoss/api/common/v2/scanoss-common_pb.js');
goog.object.extend(proto, scanoss_api_common_v2_scanoss$common_pb);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject, includeInstance),
    status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmResponse;
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strength: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms;
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrength();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string algorithm = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string strength = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.getStrength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.prototype.setStrength = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject = function(includeInstance, msg) {
  var f, obj = {
    purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    algorithmsList: jspb.Message.toObjectList(msg.getAlgorithmsList(),
    proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls;
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.deserializeBinaryFromReader);
      msg.addAlgorithms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlgorithmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms.serializeBinaryToWriter
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Algorithms algorithms = 3;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getAlgorithmsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms, 3));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setAlgorithmsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.addAlgorithms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Algorithms, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.clearAlgorithmsList = function() {
  return this.setAlgorithmsList([]);
};


/**
 * repeated Purls purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.scanoss.api.cryptography.v2);
