import { VulnerabilityCfg } from "./VulnerabilityCfg";
import { VulnerabilityService } from "../Services/http/VulnerabilityService";
import { Component } from "../shared/interfaces/Component";
import { chunkRequest } from "../Services/helper/serviceHelper";
import { logger } from "../Logger";


export class VulnerabilityScanner {
  private config: VulnerabilityCfg;

  private restService: VulnerabilityService;

  constructor(config?: VulnerabilityCfg) {
    if (config) this.config = config;
    else this.config = new VulnerabilityCfg();
    this.restService = new VulnerabilityService({
      API_KEY: config.API_KEY,
      HOST_URL: config.API_URL ? config.API_URL : '',
      CA_CERT: config.CA_CERT,
      HTTP_PROXY: config.HTTP_PROXY ? config.HTTP_PROXY : '',
      HTTPS_PROXY: config.HTTPS_PROXY ? config.HTTPS_PROXY : '',
      NO_PROXY: config.NO_PROXY,
      IGNORE_CERT_ERRORS: config.IGNORE_CA_CERT_ERR
    });
  }

  public async getVulnerabilities(components: Array<Component>){
    const requests = chunkRequest(components, this.config.REQUEST_CHUNK_SIZE);
    const vulnerabilities = [];
    for (const request of requests) {
      const r = await this.restService.getComponentVulnerabilities(request);
      if (r.ok){
        const json = await r.json();
        vulnerabilities.push(...json);
      }
      else {
        const badReq = request.map(c => `${c.purl}@${c.requirement}`;
        logger.log(`ERROR: Error getting vulnerabilities for components: ${badReq},  Status: ${r.status} ${r.statusText}`)
      }
    }
    return vulnerabilities;
  }
}
