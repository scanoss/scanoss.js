import { VulnerabilityCfg } from "./VulnerabilityCfg";
import { VulnerabilityHttpClient } from "../Clients/Vulnerability/VulnerabilityHttpClient";
import { Component } from "../shared/interfaces/Component";
import { logger } from "../Logger";
import { chunkRequest } from "../Clients/helper/clientHelper";


export class VulnerabilityScanner {
  private config: VulnerabilityCfg;

  private vulnerabilityClient: VulnerabilityHttpClient;

  constructor(config?: VulnerabilityCfg) {
    if (config) this.config = config;
    else this.config = new VulnerabilityCfg();
    this.vulnerabilityClient = new VulnerabilityHttpClient(
      this.config.API_KEY,
      this.config.API_URL ? this.config.API_URL : '',
      this.config.HTTPS_PROXY ? this.config.HTTPS_PROXY : '',
      this.config.CA_CERT
    );
  }

  public async getVulnerabilities(components: Array<Component>){
    const requests = chunkRequest(components, this.config.REQUEST_CHUNK_SIZE);
    const vulnerabilities = [];
    for (const request of requests) {
      const r = await this.vulnerabilityClient.getVulnerabilitiesComponents(request);
      if (r.ok){
        const json = await r.json();
        vulnerabilities.push(...json);
      }
      else {
        const badReq = request.map(c => `${c.purl}@${c.requirement}`);
        logger.log(`ERROR: Error getting vulnerabilities for components: ${badReq},  Status: ${r.status} ${r.statusText}`)
      }
    }
    return vulnerabilities;
  }
}
