import { BaseConfig } from "../BaseConfig";

/**
 * Configuration class for vulnerability scanning services.
 * Extends BaseConfig to provide vulnerability-specific settings.
 */
export class VulnerabilityCfg extends BaseConfig {

  /**
   * Number of components to process in each request chunk.
   * Default value is 10 to optimize API performance.
   */
  REQUEST_CHUNK_SIZE = 10;

  /**
   * API key for authenticating with the vulnerability service.
   * Leave empty if no authentication is required.
   */
  API_KEY = "";

  constructor(config?: VulnerabilityCfg) {
    super(config);
    this.REQUEST_CHUNK_SIZE = config?.REQUEST_CHUNK_SIZE ?? this.REQUEST_CHUNK_SIZE;
    this.API_KEY = config?.API_KEY ?? this.API_KEY;
  }

  /**
   * Resolves the appropriate API URL based on API key presence and current URL. See: src/sdk/BaseConfig.ts
   * If an API key is provided and the current URL is the default, returns the premium
   * URL, otherwise returns the current URL.
   * @param apiKey - The API key (if any)
   * @param currentUrl - The current API URL
   * @returns The resolved API URL
   */
  protected resolveApiUrl(apiKey: string, currentUrl: string): string {
    // Case 1: Has API key and using default URL -> upgrade to premium URL. The default URL is set on the BaseConfig.ts file
    if (apiKey && currentUrl === BaseConfig.getDefaultURL())
      return BaseConfig.getPremiumURL();
    // Case 2: Has API key and using custom URL -> keep custom URL
    if (apiKey && currentUrl.startsWith(BaseConfig.getPremiumURL()) || currentUrl.startsWith(BaseConfig.getDefaultURL())){
      // Check if custom URL is not the same as the default one.
      if (currentUrl.startsWith(BaseConfig.getPremiumURL()) || currentUrl.startsWith(BaseConfig.getDefaultURL())) {
        return currentUrl.replace(/\/scan\/direct$/, '');
      }
      return currentUrl;
    }
    // Case 4: No API key and default/empty URL -> use default URL
    return BaseConfig.getDefaultURL();
  }

  public get API_URL(): string{
    return this.resolveApiUrl(this.API_KEY, super.API_URL);
  }

  set API_URL(url: string) {
    super.API_URL = url;
  }
}
