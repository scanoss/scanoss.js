// source: scanoss/api/cryptography/v2/scanoss-cryptography.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var scanoss_api_common_v2_scanoss$common_pb = require('../../../../scanoss/api/common/v2/scanoss-common_pb.js');
goog.object.extend(proto, scanoss_api_common_v2_scanoss$common_pb);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.Algorithm', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.Hint', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.HintsInRangeResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.HintsResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.HintsResponse.Purls', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.VersionsInRangeResponse', null, global);
goog.exportSymbol('proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.Algorithm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.Algorithm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.Algorithm.displayName = 'proto.scanoss.api.cryptography.v2.Algorithm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.displayName = 'proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.VersionsInRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.displayName = 'proto.scanoss.api.cryptography.v2.VersionsInRangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.displayName = 'proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.Hint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.Hint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.Hint.displayName = 'proto.scanoss.api.cryptography.v2.Hint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.HintsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.HintsResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.HintsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.HintsResponse.displayName = 'proto.scanoss.api.cryptography.v2.HintsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.HintsResponse.Purls.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.HintsResponse.Purls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.HintsResponse.Purls.displayName = 'proto.scanoss.api.cryptography.v2.HintsResponse.Purls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.HintsInRangeResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.HintsInRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.HintsInRangeResponse.displayName = 'proto.scanoss.api.cryptography.v2.HintsInRangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.displayName = 'proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.Algorithm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.Algorithm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.Algorithm.toObject = function(includeInstance, msg) {
  var f, obj = {
algorithm: jspb.Message.getFieldWithDefault(msg, 1, ""),
strength: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm}
 */
proto.scanoss.api.cryptography.v2.Algorithm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.Algorithm;
  return proto.scanoss.api.cryptography.v2.Algorithm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.Algorithm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm}
 */
proto.scanoss.api.cryptography.v2.Algorithm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.Algorithm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.Algorithm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.Algorithm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrength();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string algorithm = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm} returns this
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string strength = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.getStrength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm} returns this
 */
proto.scanoss.api.cryptography.v2.Algorithm.prototype.setStrength = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject, includeInstance),
status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmResponse;
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.toObject = function(includeInstance, msg) {
  var f, obj = {
purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
version: jspb.Message.getFieldWithDefault(msg, 2, ""),
algorithmsList: jspb.Message.toObjectList(msg.getAlgorithmsList(),
    proto.scanoss.api.cryptography.v2.Algorithm.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls;
  return proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.scanoss.api.cryptography.v2.Algorithm;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.Algorithm.deserializeBinaryFromReader);
      msg.addAlgorithms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlgorithmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scanoss.api.cryptography.v2.Algorithm.serializeBinaryToWriter
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Algorithm algorithms = 3;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.Algorithm>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.getAlgorithmsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.Algorithm>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.Algorithm, 3));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.Algorithm>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.setAlgorithmsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.Algorithm=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.addAlgorithms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scanoss.api.cryptography.v2.Algorithm, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls.prototype.clearAlgorithmsList = function() {
  return this.setAlgorithmsList([]);
};


/**
 * repeated Purls purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.AlgorithmResponse.Purls, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.AlgorithmResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.toObject, includeInstance),
status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse;
  return proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.toObject = function(includeInstance, msg) {
  var f, obj = {
purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
versionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
algorithmsList: jspb.Message.toObjectList(msg.getAlgorithmsList(),
    proto.scanoss.api.cryptography.v2.Algorithm.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl;
  return proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 3:
      var value = new proto.scanoss.api.cryptography.v2.Algorithm;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.Algorithm.deserializeBinaryFromReader);
      msg.addAlgorithms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAlgorithmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scanoss.api.cryptography.v2.Algorithm.serializeBinaryToWriter
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string versions = 2;
 * @return {!Array<string>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.getVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.setVersionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.addVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * repeated Algorithm algorithms = 3;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.Algorithm>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.getAlgorithmsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.Algorithm>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.Algorithm, 3));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.Algorithm>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.setAlgorithmsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.Algorithm=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.Algorithm}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.addAlgorithms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scanoss.api.cryptography.v2.Algorithm, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl.prototype.clearAlgorithmsList = function() {
  return this.setAlgorithmsList([]);
};


/**
 * repeated Purl purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl>}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl>} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.Purl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.AlgorithmsInRangeResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.toObject, includeInstance),
status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.VersionsInRangeResponse;
  return proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.toObject = function(includeInstance, msg) {
  var f, obj = {
purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
versionsWithList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
versionsWithoutList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl;
  return proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersionsWith(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersionsWithout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionsWithList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getVersionsWithoutList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string versions_with = 2;
 * @return {!Array<string>}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.getVersionsWithList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.setVersionsWithList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.addVersionsWith = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.clearVersionsWithList = function() {
  return this.setVersionsWithList([]);
};


/**
 * repeated string versions_without = 3;
 * @return {!Array<string>}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.getVersionsWithoutList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.setVersionsWithoutList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.addVersionsWithout = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl.prototype.clearVersionsWithoutList = function() {
  return this.setVersionsWithoutList([]);
};


/**
 * repeated Purl purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl>}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl>} value
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.Purl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.VersionsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.VersionsInRangeResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.Hint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.Hint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.Hint.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
description: jspb.Message.getFieldWithDefault(msg, 3, ""),
category: jspb.Message.getFieldWithDefault(msg, 4, ""),
url: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
purl: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.Hint}
 */
proto.scanoss.api.cryptography.v2.Hint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.Hint;
  return proto.scanoss.api.cryptography.v2.Hint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.Hint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.Hint}
 */
proto.scanoss.api.cryptography.v2.Hint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.Hint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.Hint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.Hint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string category = 4;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string purl = 6;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.setPurl = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.Hint} returns this
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.clearPurl = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.Hint.prototype.hasPurl = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.HintsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.HintsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.HintsResponse.Purls.toObject, includeInstance),
status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.HintsResponse;
  return proto.scanoss.api.cryptography.v2.HintsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.HintsResponse.Purls;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.HintsResponse.Purls.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.HintsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.HintsResponse.Purls.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.HintsResponse.Purls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.toObject = function(includeInstance, msg) {
  var f, obj = {
purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
version: jspb.Message.getFieldWithDefault(msg, 2, ""),
hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.scanoss.api.cryptography.v2.Hint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.HintsResponse.Purls;
  return proto.scanoss.api.cryptography.v2.HintsResponse.Purls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.scanoss.api.cryptography.v2.Hint;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.Hint.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.HintsResponse.Purls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scanoss.api.cryptography.v2.Hint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Hint hints = 3;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.Hint>}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.Hint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.Hint, 3));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.Hint>} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} returns this
*/
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.setHintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.Hint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.Hint}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scanoss.api.cryptography.v2.Hint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls} returns this
 */
proto.scanoss.api.cryptography.v2.HintsResponse.Purls.prototype.clearHintsList = function() {
  return this.setHintsList([]);
};


/**
 * repeated Purls purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.HintsResponse.Purls>}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.HintsResponse.Purls>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.HintsResponse.Purls, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.HintsResponse.Purls>} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse} returns this
*/
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse.Purls}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.HintsResponse.Purls, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse} returns this
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse} returns this
*/
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.HintsResponse} returns this
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.HintsResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.HintsInRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
purlsList: jspb.Message.toObjectList(msg.getPurlsList(),
    proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.toObject, includeInstance),
status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.HintsInRangeResponse;
  return proto.scanoss.api.cryptography.v2.HintsInRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.deserializeBinaryFromReader);
      msg.addPurls(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.HintsInRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.toObject = function(includeInstance, msg) {
  var f, obj = {
purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
versionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.scanoss.api.cryptography.v2.Hint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl;
  return proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 3:
      var value = new proto.scanoss.api.cryptography.v2.Hint;
      reader.readMessage(value,proto.scanoss.api.cryptography.v2.Hint.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.scanoss.api.cryptography.v2.Hint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string versions = 2;
 * @return {!Array<string>}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.getVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.setVersionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.addVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * repeated Hint hints = 3;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.Hint>}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.Hint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.Hint, 3));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.Hint>} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
*/
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.setHintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.Hint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.Hint}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.scanoss.api.cryptography.v2.Hint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl.prototype.clearHintsList = function() {
  return this.setHintsList([]);
};


/**
 * repeated Purl purls = 1;
 * @return {!Array<!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl>}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.getPurlsList = function() {
  return /** @type{!Array<!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl>} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.setPurlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.addPurls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.cryptography.v2.HintsInRangeResponse.Purl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.clearPurlsList = function() {
  return this.setPurlsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} returns this
*/
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.cryptography.v2.HintsInRangeResponse} returns this
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.cryptography.v2.HintsInRangeResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.scanoss.api.cryptography.v2);
