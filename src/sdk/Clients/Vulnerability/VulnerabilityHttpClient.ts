import { HttpClient } from "../http/HttpClient";
import { IVulnerabilityClient } from "./IVulnerabilityClient";
import { logger } from "../../Logger";
import { Component } from "../../types/common/types";
import { ComponentsVulnerabilitiesResponse, ComponentVulnerabilityResponse } from "../../types/vulnerability/types";

export class VulnerabilityHttpClient extends HttpClient implements IVulnerabilityClient{
  private client: HttpClient;
  private readonly baseUrl: string;

  constructor(token: string, hostName: string, ignoreCertErrors: boolean = false ,proxyHost?: string, caCertPath?: string) {
    super();
    this.client = new HttpClient({
      HOST_URL: hostName,
      API_KEY: token,
      HTTPS_PROXY: proxyHost,
      CA_CERT: caCertPath,
      IGNORE_CERT_ERRORS: ignoreCertErrors
    });
    this.baseUrl = hostName;
  }

  public async getVulnerabilitiesComponents(components: Array<Component>): Promise<ComponentsVulnerabilitiesResponse> {
    try {
      logger.debug(`Getting vulnerabilities for ${components.map((c)=> JSON.stringify(c,null,2))} components`);
      const response = await this.client.post(`${this.baseUrl}/v2/vulnerabilities/components`, { components: components });
      if (response.ok) {
        return await response.json() as ComponentsVulnerabilitiesResponse;
      }
      const errorText = await response.text();
      const errorMessage = `Failed to get vulnerabilities: ${response.status} ${response.statusText} - ${errorText}`;
      throw new Error(errorMessage);
    } catch (error) {
      throw this.handleError(error, 'Failed to get vulnerabilities');
    }
  }

  public async getVulnerabilitiesComponent(component: Component): Promise<ComponentVulnerabilityResponse> {
    try {
      const queryParams = new URLSearchParams();
      queryParams.append('purl', component.purl);
      if (component.requirement) {
        queryParams.append('requirement', component.requirement);
      }
      const response =  await this.client.get(`${this.baseUrl}/api/v2/vulnerabilities/component?${queryParams.toString()}`);
      if (response.ok) {
        return await response.json() as ComponentVulnerabilityResponse;
      }
      const errorText = await response.text();
      const errorMessage = `Failed to get vulnerabilities: ${response.status} ${response.statusText} - ${errorText}`;
      throw new Error(errorMessage);
    } catch (error) {
      throw this.handleError(error, 'Failed to get vulnerabilities');
    }
  }
}
