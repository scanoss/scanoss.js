import { ClientConfig, HttpClient } from "../http/HttpClient";
import { IVulnerabilityClient } from "./IVulnerabilityClient";
import { logger } from "../../Logger";
import { Component } from "../../types/common/types";
import { ComponentsVulnerabilitiesResponse, ComponentVulnerabilityResponse } from "../../types/vulnerability/types";

export class VulnerabilityHttpClient extends HttpClient implements IVulnerabilityClient{

  constructor(clientConfig: ClientConfig) {
    super(clientConfig);
  }

  public async getVulnerabilitiesComponents(components: Array<Component>): Promise<ComponentsVulnerabilitiesResponse> {
    try {
      const baseURL = this.hostURL();
      logger.debug(`Getting vulnerabilities for ${components.map((c)=> JSON.stringify(c,null,2))} components`);
      const response = await this.post(`${baseURL}/v2/vulnerabilities/components`, { components: components });
      if (response.ok) {
        return await response.json() as ComponentsVulnerabilitiesResponse;
      }
      const errorText = await response.text();
      const errorMessage = `Failed to get vulnerabilities: ${response.status} ${response.statusText} - ${errorText}`;
      throw new Error(errorMessage);
    } catch (error) {
      throw this.handleError(error, 'Failed to get vulnerabilities');
    }
  }

  public async getVulnerabilitiesComponent(component: Component): Promise<ComponentVulnerabilityResponse> {
    try {
      const baseURL = this.hostURL();
      const queryParams = new URLSearchParams();
      queryParams.append('purl', component.purl);
      if (component.requirement) {
        queryParams.append('requirement', component.requirement);
      }
      const response =  await this.get(`${baseURL}/api/v2/vulnerabilities/component?${queryParams.toString()}`);
      if (response.ok) {
        return await response.json() as ComponentVulnerabilityResponse;
      }
      const errorText = await response.text();
      const errorMessage = `Failed to get vulnerabilities: ${response.status} ${response.statusText} - ${errorText}`;
      throw new Error(errorMessage);
    } catch (error) {
      throw this.handleError(error, 'Failed to get vulnerabilities');
    }
  }
}
