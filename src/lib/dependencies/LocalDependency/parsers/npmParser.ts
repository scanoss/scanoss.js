import path from "path";
import { PackageURL } from "packageurl-js";
import { ILocalDependency } from "../DependencyTypes";

const PURL_TYPE = 'npm';


// Parse a package.json file from node projects
// See reference on: https://docs.npmjs.com/cli/v8/configuring-npm/package-json
const MANIFEST_FILE = 'package.json';
export function packageParser(fileContent: string, filePath: string): ILocalDependency {
    // If the file is not manifest file, return an empty results
    const results: ILocalDependency = {file: filePath, purls: []};
    if(path.basename(filePath) != MANIFEST_FILE)
        return results;
    const o = JSON.parse(fileContent);
    let devDeps = Object.keys(o.devDependencies || {});
    let deps = Object.keys(o.dependencies || {});

    for(const name of deps){
        const purlString = new PackageURL(PURL_TYPE, undefined, name, undefined, undefined, undefined).toString();
        results.purls.push({purl: purlString, scope: "dependencies", requirement: o.dependencies[name]});
    }

    for(const name of devDeps){
      const purlString = new PackageURL(PURL_TYPE, undefined, name, undefined, undefined, undefined).toString();
      results.purls.push({purl: purlString, scope: "devDependencies", requirement: o.devDependencies[name]});
    }

    return results;
}


// Parse a package-lock.json file from node projects
// See reference on: https://docs.npmjs.com/cli/v8/configuring-npm/package-json
export function packagelockParser(fileContent: string, filePath: string): ILocalDependency {

    const results: ILocalDependency = {file: filePath, purls: []};

    if(path.basename(filePath) != 'package-lock.json')
        return results;

    const packages = JSON.parse(fileContent)?.packages;

    if(!packages) return results;

    for (const [key, value] of Object.entries(packages)) {
        if(!key) continue;

        const keySplit = key.split("/")
        const depName = keySplit[keySplit.length-1]

        let purl = new PackageURL(PURL_TYPE, undefined, depName,undefined, undefined, undefined).toString();
        let req = value['version'];
        results.purls.push({purl: purl, requirement: req});
    }

    return results;
}



export function yarnLockParser(fileContent: string, filePath: string): ILocalDependency {
  const results: ILocalDependency = {file: filePath, purls: []};

  if(path.basename(filePath) != 'yarn.lock')
    return results;

  const yarnVersion = yarnLockRecognizeVersion(fileContent)
  if (yarnVersion === YarnLockVersionEnum.V1) return yarnLockV1Parser(fileContent, filePath)
  else if (yarnVersion === YarnLockVersionEnum.V2) return yarnLockV2Parser(fileContent, filePath)

  return results;
}

enum YarnLockVersionEnum {
  "V1"  ,
  "V2",
  UnknownYarnLockFormat
}

/*
    The start of v1 file has this:
        # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
        # yarn lockfile v1

    The start of v2 file has this:
        # This file is generated by running "yarn install" inside your project.
        # Manual changes might be lost - proceed with caution!

        __metadata:
 */
export function yarnLockRecognizeVersion(fileContent: string): YarnLockVersionEnum {

  const yarn = fileContent.split("\n", 10) //Check only the first 10 lines;
  for (const line of yarn) {
    if ( line.includes('__metadata:') ) return YarnLockVersionEnum.V2
    if ( line.includes('yarn lockfile v1') ) return YarnLockVersionEnum.V1
  }
  return YarnLockVersionEnum.UnknownYarnLockFormat
}

export function yarnLockV1Parser(fileContent: string, filePath: string): ILocalDependency {

  const results: ILocalDependency = {file: filePath, purls: []};

  //Yield an array with each element is a dependency
  /*
    "@babel/core@^7.1.0", "@babel/core@^7.3.4":
      version "7.3.4"
      resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.3.4.tgz#921a5a13746c21e32445bf0798680e9d11a6530b"
      integrity sha512-jRsuseXBo9pN197KnDwhhaaBzyZr2oIcLHHTt2oDdQrej5Qp57dCCJafWx5ivU8/alEYDpssYqv1MUqcxwQlrA==
      dependencies:
        "@babel/code-frame" "^7.0.0"
        "@babel/generator" "^7.3.4"
   */
  const yl_dependencies = fileContent.split("\n\n");

  for (const yl_dependency of yl_dependencies) {

    // Clean comments and empty lines

    const dep_lines = yl_dependency.split("\n");
    for (const dep_line of dep_lines) {

      //    "@babel/code-frame" "^7.0.0"
      //    "@babel/generator" "^7.3.4"
      if (dep_line.startsWith(' '.repeat(4))) {}

      //  version "7.3.4"
      //  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.3.4.tgz#921a5a13746c21e32445bf0798680e9d11a6530b"
      //  integrity sha512-jRsuseXBo9pN197KnDwhhaaBzyZr2oIcLHHTt2oDdQrej5Qp57dCCJafWx5ivU8/alEYDpssYqv1MUqcxwQlrA==
      //  dependencies:
      else if (dep_line.startsWith(' '.repeat(2))) {

      }

      //"@babel/core@^7.1.0", "@babel/core@^7.3.4":
      else if (!dep_line.startsWith(' ')){

      }

    }

  }

  return results;


}


export function yarnLockV2Parser(fileContent: string, filePath: string): ILocalDependency {

  const results: ILocalDependency = {file: filePath, purls: []};


  return results;

}
