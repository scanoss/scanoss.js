//=============================================================================
// Implementation of CRC-8/MAXIM-DOW,CRC-8/MAXIM,DOW-CRC.
// Notes: Code ported from C Auto-generated by http://crc.drque.net/
//=============================================================================

//Table size
const CRC8_MAXIM_DOW_TABLE_SIZE = 0x100
const CRC8_MAXIM_DOW_POLYNOMIAL = 0x8C // 0x31 reflected
const CRC8_MAXIM_DOW_INITIAL = 0x00 // 0x00 reflected
const CRC8_MAXIM_DOW_FINAL = 0x00 // 0x00 reflected

let crc8_MAXIM_DOW_Table = []

/**
 * Compute CRC of byte without lookup tables.
 *
 * @param {number} crc Current CRC or initial value
 * @param {number} byte New byte to accumulate.
 * @returns {number} Updated CRC.
 */
function crc8_MAXIM_DOW_ByteNoTable(crc, byte) {
  crc ^= byte;
  for (let count = 0; count<8; count++) {
    const isSet = (crc & 0x01)
    crc >>= 1;
    if (isSet) crc ^= CRC8_MAXIM_DOW_POLYNOMIAL
  }
  return crc
}

/**
 * Create the lookup table.
 * Note: Must be called before any table based CRC calculations can be done.
 */
function crc8_MAXIM_DOW_GenerateTable() {
  for(let i = 0; i<CRC8_MAXIM_DOW_TABLE_SIZE; i++) {
    crc8_MAXIM_DOW_Table.push(crc8_MAXIM_DOW_ByteNoTable(0, i))
  }
}

/**
 * Update CRC by byte.
 *
 * @param {number} crc Initial CRC.
 * @param {number} byte New byte to accumulate.
 * @returns {number} Updated CRC.
 */
function crc8_MAXIM_DOW_Byte( crc, byte )
{
  const index = byte ^ crc;
  return crc8_MAXIM_DOW_Table[ index ] ^ ( crc >> 8 );
}

/**
 * Compute CRC of buffer.
 * Note: crc8_MAXIM_DOW_GenerateTable() must be called before use this function
 *
 * @param {Buffer} buffer Buffer with bytes to calculate CRC.
 * @returns {number} CRC
 */
function crc8_MAXIM_DOW_Buffer(buffer) {
  let crc = CRC8_MAXIM_DOW_INITIAL;
  for (let index = 0; index < buffer.length ; index ++) {
    crc = crc8_MAXIM_DOW_Byte(crc, buffer[index])
  }
  crc ^= CRC8_MAXIM_DOW_FINAL;
  return crc;
}

module.exports = {
  crc8_MAXIM_DOW_GenerateTable,
  crc8_MAXIM_DOW_Buffer
}
